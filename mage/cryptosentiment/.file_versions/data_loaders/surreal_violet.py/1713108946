import io
import pandas as pd
import requests
from datetime import datetime
from binance import Client
from binance.exceptions import BinanceAPIException, BinanceRequestException
from mage_ai.data_preparation.shared.secrets import get_secret_value

import pandas as pd


# Importing decorators if they're not already defined
if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test


def fetch_binance_data(
    api_key: str,
    secret_key: str,
    symbol: str,
    interval: str,
    start_str: str
) -> pd.DataFrame:
    """
    Fetches data from Binance based on the given parameters.
    """
    # Establish connection to the Binance API
    client = Client(
        api_key,
        secret_key
    )
    # try except block to evaluate whether api key and secret key are valid and connection is established
    try:
        client.get_account()
    except (BinanceAPIException, BinanceRequestException) as e:
        raise ValueError(f"API Error: {e.status_code} - {e.message}") from e
    else:
        print("API connection established successfully.")

    # Fetch historical klines
    klines = client.get_historical_klines(
        symbol    = symbol,
        interval  = interval,
        start_str = start_str,
    )
    return pd.DataFrame(
        data    = klines,
        columns = [
            "Open Time",
            "Open",
            "High",
            "Low",
            "Close",
            "Volume",
            "Close Time",
            "Quote Asset Volume",
            "Number of Trades",
            "Taker Buy Base Asset Volume",
            "Taker Buy Quote Asset Volume",
            "Ignore",
        ],
    )


@data_loader
def load_data_from_api(*args, **kwargs):
    """
    Load historical daily data for a symbol from Binance API.
    """
    days_in_past = 360 + 104 # 1 year + 3 months
    symbol       = 'BTCUSDT'
    interval     = Client.KLINE_INTERVAL_1DAY
    start_str    = datetime.strptime(kwargs['start_date'], "%Y-%m-%d").strftime('%d %b %Y')

    data = fetch_binance_data(
        api_key    = get_secret_value('bi_key'),
        secret_key = get_secret_value('bi_secret'),
        symbol     = symbol,
        interval   = interval,
        start_str  = start_str
    )

    return data
    
    

@test
def test_output(output, *args) -> None:
    """
    Test code for testing the output of the data loader.
    """
    assert output is not None, 'The output is undefined'
    assert not output.empty, 'The output dataframe is empty'
    assert 'Open' in output.columns, 'DataFrame should contain "Open" column'
