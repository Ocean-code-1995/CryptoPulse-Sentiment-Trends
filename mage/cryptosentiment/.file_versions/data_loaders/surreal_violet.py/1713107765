import io
import pandas as pd
import requests
from datetime import datetime

# Importing decorators if they're not already defined
if 'data_loader' not in globals():
    from mage_ai.data_preparation.decorators import data_loader
if 'test' not in globals():
    from mage_ai.data_preparation.decorators import test

def date_to_milliseconds(date_str):
    """Convert date in 'YYYY-MM-DD' format to milliseconds since the epoch."""
    epoch = datetime.utcfromtimestamp(0)
    date = datetime.strptime(date_str, "%Y-%m-%d")
    delta = date - epoch
    return int(delta.total_seconds() * 1000.0)

@data_loader
def load_data_from_api(*args, **kwargs):
    """
    Load historical daily data for a symbol from Binance API.
    """
    symbol = kwargs.get('symbol')  # Default to 'BTCUSDT' if no symbol provided
    start_str = kwargs.get('start_date')  # Default start date
    end_str = kwargs.get('execution_date')  # Default end date
    url = 'https://api.binance.com/api/v3/klines'
    params = {
        'symbol': symbol,
        'interval': '1d',
        'startTime': date_to_milliseconds(start_str),
        'endTime': date_to_milliseconds(end_str)
    }
    response = requests.get(url, params=params)
    if response.status_code == 200:
        data = pd.DataFrame(response.json(), columns=[
            'Open Time', 'Open', 'High', 'Low', 'Close', 'Volume', 'Close Time', 
            'Quote Asset Volume', 'Number of Trades', 'Taker Buy Base Asset Volume', 
            'Taker Buy Quote Asset Volume', 'Ignore'
        ])
        # Convert timestamps to readable dates
        data['Open Time'] = pd.to_datetime(data['Open Time'], unit='ms')
        data['Close Time'] = pd.to_datetime(data['Close Time'], unit='ms')
        return data
    else:
        return None 

@test
def test_output(output, *args) -> None:
    """
    Test code for testing the output of the data loader.
    """
    assert output is not None, 'The output is undefined'
    assert not output.empty, 'The output dataframe is empty'
    assert 'Open' in output.columns, 'DataFrame should contain "Open" column'
