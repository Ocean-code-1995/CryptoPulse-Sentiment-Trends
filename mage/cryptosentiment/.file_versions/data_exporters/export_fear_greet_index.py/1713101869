from mage_ai.settings.repo import get_repo_path
from mage_ai.io.bigquery import BigQuery
from mage_ai.io.config import ConfigFileLoader
from pandas import DataFrame
from os import path

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


def fetch_binance_data(
    api_key: str,
    secret_key: str,
    symbol: str,
    interval: str,
    start_str: str
) -> pd.DataFrame:
    """
    Fetches data from Binance based on the given parameters.
    """
    # Establish connection to the Binance API
    client = Client(
        api_key,
        secret_key
    )
    # try except block to evaluate whether api key and secret key are valid and connection is established
    try:
        client.get_account()
    except (BinanceAPIException, BinanceRequestException) as e:
        raise ValueError(f"API Error: {e.status_code} - {e.message}") from e
    else:
        print("API connection established successfully.")

    # Fetch historical klines
    klines = client.get_historical_klines(
        symbol    = symbol,
        interval  = interval,
        start_str = start_str,
    )
    return pd.DataFrame(
        data    = klines,
        columns = [
            "Open Time",
            "Open",
            "High",
            "Low",
            "Close",
            "Volume",
            "Close Time",
            "Quote Asset Volume",
            "Number of Trades",
            "Taker Buy Base Asset Volume",
            "Taker Buy Quote Asset Volume",
            "Ignore",
        ],
    )

@data_exporter
def export_data_to_big_query(df: DataFrame, **kwargs) -> None:
    """
    Template for exporting data to a BigQuery warehouse.
    Specify your configuration settings in 'io_config.yaml'.

    Docs: https://docs.mage.ai/design/data-loading#bigquery
    """
    table_id = 'dataengineering-411512.cryptopulse.fear_and_greet_index'
    config_path = path.join(get_repo_path(), 'io_config.yaml')
    config_profile = 'default'

    BigQuery.with_config(ConfigFileLoader(config_path, config_profile)).export(
        df,
        table_id,
        if_exists='replace',  # Specify resolution policy if table name already exists
    )
